var Path = require("path");
var Hapi = require("hapi");
var Hoek = require("hoek");
var Config = require("config");
var Chairo = require('chairo');
var Good = require("good");
var GoodConsole = require("good-console");
var Utils = require("./common/utils");
var Db = require("../database");

var internals = {
	plugins: [],
	api: require("./api"),
	//web: require("./web")
};



// TODO: dummy api and web plugins


// Good
internals.plugins.push({
    register: Good,
    options: {
        reporters: [{
            reporter: GoodConsole,
            events: {
                //ops: "*",
                log: "*", // maps to the "log" event 
                response: "*", // maps to either the "response" or "tail" event
                error: "*", // maps to the "request-error" event
                request: "*" // maps to the hapi "request" event (generated by request.log())
            }
        }]
    }
});

internals.plugins.push({
    register: Chairo,
    options: {
        log: "silent"
    }
});

internals.init = function(){

	server = new Hapi.Server();
	server.connection({
    	port: Config.get("port")
	});

    // first register the external plugins
	server.register(internals.plugins, function(err) {

	    Hoek.assert(!err, 'Failed registration of plugins: ' + err);

        // then register the internal plugins
		server.register([internals.api], function(err){

	    	Hoek.assert(!err, 'Failed registration of plugins: ' + err);

            // finally, start the server and finish the initialization process (load seneca actions, etc)
	    	server.start(function(err) {

		    	Hoek.assert(!err, 'Failed start server: ' + err);

                Utils.loadActions(server.seneca, Config.get("actions.db"));
		    	console.log('Server started at: ' + server.info.uri);
		    });
		});    
	});

    // make sure we always have a "credentials" object on request.auth
    server.ext("onPostAuth", function(request, reply) {
        request.auth.credentials = request.auth.credentials || {};
        return reply.continue();
    });

	Utils.registerServer(server);

};

internals.init();
